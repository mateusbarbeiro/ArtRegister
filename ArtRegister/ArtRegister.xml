<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ArtRegister</name>
    </assembly>
    <members>
        <member name="T:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseDoubleRepository`1">
            <summary>
            Interface genérica para repositório para entidade com chave composta. Declaração dos métodos para CRUD.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseDoubleRepository`1.Insert(`0)">
            <summary>
            Insere um novo registro
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseDoubleRepository`1.Update(`0)">
            <summary>
            Atualiza um registro
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseDoubleRepository`1.PhysicalDelete(System.Int64,System.Int64)">
            <summary>
            Deleta um registro a partir do Id
            </summary>
            <param name="id"></param>
            <param name="id2"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseDoubleRepository`1.UpdateFields(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Atualizar alguns campos
            </summary>
            <param name="entity"></param>
            <param name="includeProperties"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseDoubleRepository`1.Select(System.Int64,System.Int64)">
            <summary>
            Busca um registro por Id
            </summary>
            <param name="id"></param>
            <param name="id2"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseDoubleRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retorna se para a condição, existe tal registro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseDoubleRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constrói busca no banco
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseDoubleRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca quantidade de registros a partir do filtro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseDoubleRepository`1.GetPaged(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca página
            </summary>
            <param name="initialRow"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseRepository`1">
            <summary>
            Interface genérica para repositório. Declaração dos métodos para CRUD.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseRepository`1.Insert(`0)">
            <summary>
            Insere um novo registro
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseRepository`1.Update(`0)">
            <summary>
            Atualiza um registro
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseRepository`1.PhysicalDelete(System.Int64)">
            <summary>
            Deleta um registro a partir do Id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseRepository`1.UpdateFields(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Atualizar alguns campos
            </summary>
            <param name="entity"></param>
            <param name="includeProperties"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseRepository`1.Select">
            <summary>
            Busca todos os registros
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseRepository`1.Select(System.Int64)">
            <summary>
            Busca um registro por Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retorna se para a condição, existe tal registro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constrói busca no banco
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca quantidade de registros a partir do filtro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Repositories.BaseRepositories.IBaseRepository`1.GetPaged(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca páginada
            </summary>
            <param name="initialRow"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Application.Interfaces.Repository.IProductsRepository">
            <summary>
            Interface repositório para produtos.
            </summary>
        </member>
        <member name="T:ArtRegister.Application.Interfaces.Repository.ISectionsRepository">
            <summary>
            Interface repositório para seção.
            </summary>
        </member>
        <member name="T:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseDoubleService`1">
            <summary>
            Interface da classe genérica dos serviços para entidades com chave composta. Declaração dos métodos para CRUD.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseDoubleService`1.LogicalDelete(System.Int64,System.Int64)">
            <summary>
            Exclui logicamente um registro a partir do id e id2
            </summary>
            <param name="id"></param>
            <param name="id2"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseDoubleService`1.Add``3(``0)">
            <summary>
            Cria um novo registro
            </summary>
            <typeparam name="TInputModel"></typeparam>
            <typeparam name="TOutputModel"></typeparam>
            <typeparam name="TValidator"></typeparam>
            <param name="inputModel"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseDoubleService`1.Add``1(`0)">
            <summary>
            Cria um novo registro
            </summary>
            <typeparam name="TOutputModel"></typeparam>
            <param name="inputModel"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseDoubleService`1.PhysicalDelete(System.Int64,System.Int64)">
            <summary>
            Exclui fisicamente um registro a partir do id
            </summary>
            <param name="id"></param>
            <param name="id2"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseDoubleService`1.Update``3(``0)">
            <summary>
            Atualiza um registro
            </summary>
            <typeparam name="TInputModel"></typeparam>
            <typeparam name="TOutputModel"></typeparam>
            <typeparam name="TValidator"></typeparam>
            <param name="inputModel"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseDoubleService`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca quantidade de registros a partir do filtro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseDoubleService`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retorna se para a condição, existe tal registro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseDoubleService`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constrói busca no banco
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseDoubleService`1.UpdateSomeFields(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Atualiza alguns campos
            </summary>
            <param name="entity"></param>
            <param name="updatedProperties"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseDoubleService`1.GetPaged(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca páginada
            </summary>
            <param name="page"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseDoubleService`1.GetPaged(ArtRegister.Infrastructure.Dtos.PaginatedInputModel)">
            <summary>
            Busca páginada com parâmetros
            </summary>
            <param name="pagingParams"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseService`1">
            <summary>
            Interface da classe genérica dos serviços. Declaração dos métodos para CRUD.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseService`1.Add``3(``0)">
            <summary>
            Cria um novo registro
            </summary>
            <typeparam name="TInputModel"></typeparam>
            <typeparam name="TOutputModel"></typeparam>
            <typeparam name="TValidator"></typeparam>
            <param name="inputModel"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseService`1.Add``1(`0)">
            <summary>
            Cria um novo registro
            </summary>
            <typeparam name="TOutputModel"></typeparam>
            <param name="inputModel"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseService`1.PhysicalDelete(System.Int64)">
            <summary>
            Exclui fisicamente um registro a partir do id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseService`1.Update``3(``0)">
            <summary>
            Atualiza um registro
            </summary>
            <typeparam name="TInputModel"></typeparam>
            <typeparam name="TOutputModel"></typeparam>
            <typeparam name="TValidator"></typeparam>
            <param name="inputModel"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseService`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca quantidade de registros a partir do filtro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseService`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retorna se para a condição, existe tal registro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseService`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constrói busca no banco
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseService`1.UpdateSomeFields(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Atualiza alguns campos
            </summary>
            <param name="entity"></param>
            <param name="updatedProperties"></param>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.BaseServices.IBaseService`1.GetPaged(ArtRegister.Infrastructure.Dtos.PaginatedInputModel)">
            <summary>
            Busca páginada com parâmetros
            </summary>
            <param name="pagingParams"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Application.Interfaces.Services.IProductsService">
            <summary>
            Interface para serviço de produto. Declaração de métodos
            </summary>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.IProductsService.Insert(ArtRegister.Domain.Dtos.CreateProductsModel)">
            <summary>
            Insere um novo produto
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.IProductsService.Update(ArtRegister.Domain.Dtos.UpdateProductsModel)">
            <summary>
            Atualiza um registro de usuário
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.IProductsService.GetById(System.Int64)">
            <summary>
            Busca um registro por Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.IProductsService.DeleteById(System.Int64)">
            <summary>
            Deleta um registro de usuário
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ArtRegister.Application.Interfaces.Services.IProductsService.Get(ArtRegister.Infrastructure.Dtos.PaginatedInputModel)" -->
        <member name="T:ArtRegister.Application.Interfaces.Services.ISectionsService">
            <summary>
            Interface para serviço de seção. Declaração de métodos
            </summary>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.ISectionsService.Insert(ArtRegister.Domain.Dtos.CreateSectionsModel)">
            <summary>
            Insere uma nova seção
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.ISectionsService.Update(ArtRegister.Domain.Dtos.UpdateSectionsModel)">
            <summary>
            Atualiza um registro de seção
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.ISectionsService.GetById(System.Int64)">
            <summary>
            Busca um registro por Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.ISectionsService.DeleteById(System.Int64)">
            <summary>
            Deleta um registro de seção
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Interfaces.Services.ISectionsService.Get(ArtRegister.Infrastructure.Dtos.PaginatedInputModel)">
            <summary>
            Busca lista de todos seção levando em consideração parametros de filtragem e ordenação
            </summary>
            <param name="pagingParams"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Application.Services.BaseDoubleService`1">
            <summary>
            Classe de serviço genérica para entidades associativas. CRUD genérico.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <summary>
            Classe de serviço genérica. CRUD genérico.
            </summary>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseDoubleService`1.LogicalDelete(System.Int64,System.Int64)">
            <summary>
            Exclui logicamente um registro a partir do id e id2
            </summary>
            <param name="id"></param>
            <param name="id2"></param>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseDoubleService`1.Add``1(`0)">
            <summary>
            Cria um novo registro
            </summary>
            <typeparam name="TOutputModel"></typeparam>
            <param name="inputModel"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseDoubleService`1.PhysicalDelete(System.Int64,System.Int64)">
            <summary>
            Exclui fisicamente um registro a partir do id
            </summary>
            <param name="id"></param>
            <param name="id2"></param>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseDoubleService`1.Update``3(``0)">
            <summary>
            Atualiza um registro
            </summary>
            <typeparam name="TInputModel"></typeparam>
            <typeparam name="TOutputModel"></typeparam>
            <typeparam name="TValidator"></typeparam>
            <param name="inputModel"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseDoubleService`1.UpdateSomeFields(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Atualiza alguns campos
            </summary>
            <param name="entity"></param>
            <param name="updatedProperties"></param>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseDoubleService`1.Validate(`0,FluentValidation.AbstractValidator{`0})">
            <summary>
            Valida o objeto a ser cadastrado
            </summary>
            <param name="obj"></param>
            <param name="validator"></param>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseDoubleService`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retorna se para a condição, existe tal registro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseDoubleService`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca quantidade de registros a partir do filtro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseDoubleService`1.CalcStartRow(System.Int32,System.Int32)">
            <summary>
            Calcula qual a linha de start da listagem, conforme número da pagina atual e total de paginas
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseDoubleService`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constrói busca no banco
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseDoubleService`1.GetPaged(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca páginada
            </summary>
            <param name="page"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseDoubleService`1.GetPaged(ArtRegister.Infrastructure.Dtos.PaginatedInputModel)">
            <summary>
            Busca páginada com parâmetros
            </summary>
            <param name="pagingParams"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Application.Services.BaseService`1">
            <summary>
            Classe de serviço genérica. CRUD genérico.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <summary>
            Classe de serviço genérica. CRUD genérico.
            </summary>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.Add``3(``0)">
            <summary>
            Cria um novo registro
            </summary>
            <typeparam name="TInputModel"></typeparam>
            <typeparam name="TOutputModel"></typeparam>
            <typeparam name="TValidator"></typeparam>
            <param name="inputModel"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.Add``1(`0)">
            <summary>
            Cria um novo registro
            </summary>
            <typeparam name="TOutputModel"></typeparam>
            <param name="inputModel"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.PhysicalDelete(System.Int64)">
            <summary>
            Exclui fisicamente um registro a partir do id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.LogicalDelete(System.Int64)">
            <summary>
            Exclui logicamente um registro a partir do id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.Update``3(``0)">
            <summary>
            Atualiza um registro
            </summary>
            <typeparam name="TInputModel"></typeparam>
            <typeparam name="TOutputModel"></typeparam>
            <typeparam name="TValidator"></typeparam>
            <param name="inputModel"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.Validate(`0,FluentValidation.AbstractValidator{`0})">
            <summary>
            Valida o objeto a ser cadastrado
            </summary>
            <param name="obj"></param>
            <param name="validator"></param>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.UpdateSomeFields(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Atualiza alguns campos
            </summary>
            <param name="entity"></param>
            <param name="updatedProperties"></param>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca quantidade de registros a partir do filtro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.CalcStartRow(System.Int32,System.Int32)">
            <summary>
            Calcula qual a linha de start da listagem, conforme número da pagina atual e total de paginas
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retorna se para a condição, existe tal registro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constrói busca no banco
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.GetPaged(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca páginada
            </summary>
            <param name="page"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.BaseService`1.GetPaged(ArtRegister.Infrastructure.Dtos.PaginatedInputModel)">
            <summary>
            Busca páginada com parâmetros
            </summary>
            <param name="pagingParams"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Application.Services.ProductsService">
            <summary>
            Produtos
            </summary>
        </member>
        <member name="M:ArtRegister.Application.Services.ProductsService.#ctor(ArtRegister.Application.Interfaces.Repository.IProductsRepository,AutoMapper.IMapper)">
            <summary>
            Construtor
            </summary>
            <param name="baseRepository"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:ArtRegister.Application.Services.ProductsService.Insert(ArtRegister.Domain.Dtos.CreateProductsModel)">
            <summary>
            Insere um novo produto
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.ProductsService.Update(ArtRegister.Domain.Dtos.UpdateProductsModel)">
            <summary>
            Atualiza um registro de produto
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.ProductsService.GetById(System.Int64)">
            <summary>
            Busca registro por id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.ProductsService.DeleteById(System.Int64)">
            <summary>
            Deleta um registro de produto
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.ProductsService.Get(ArtRegister.Infrastructure.Dtos.PaginatedInputModel)">
            <summary>
            Busca lista de todos produtos levando em consideração parametros de filtragem e ordenação
            </summary>
            <param name="pagingParams"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Application.Services.SectionsService">
            <summary>
            Seções
            </summary>
        </member>
        <member name="M:ArtRegister.Application.Services.SectionsService.#ctor(ArtRegister.Application.Interfaces.Repository.ISectionsRepository,AutoMapper.IMapper)">
            <summary>
            Construtor
            </summary>
            <param name="baseRepository"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:ArtRegister.Application.Services.SectionsService.Insert(ArtRegister.Domain.Dtos.CreateSectionsModel)">
            <summary>
            Insere um novo seção
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.SectionsService.Update(ArtRegister.Domain.Dtos.UpdateSectionsModel)">
            <summary>
            Atualiza um registro de seção
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.SectionsService.GetById(System.Int64)">
            <summary>
            Busca registro por id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.SectionsService.DeleteById(System.Int64)">
            <summary>
            Deleta um registro de produto
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Application.Services.SectionsService.Get(ArtRegister.Infrastructure.Dtos.PaginatedInputModel)">
            <summary>
            Busca lista de todas as seções levando em consideração parametros de filtragem e ordenação
            </summary>
            <param name="pagingParams"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Application.Validators.ProductsValidator">
            <summary>
            Validação para objeto do tipo usuário
            </summary>
        </member>
        <member name="M:ArtRegister.Application.Validators.ProductsValidator.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="T:ArtRegister.Application.Validators.SectionsValidator">
            <summary>
            Validação para objeto do tipo seção
            </summary>
        </member>
        <member name="M:ArtRegister.Application.Validators.SectionsValidator.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="T:ArtRegister.Domain.Dtos.CreateProductsModel">
            <summary>
            Modelo para criação de produto
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Dtos.CreateProductsModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Dtos.CreateProductsModel.Description">
            <summary>
            Descrição
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Dtos.CreateProductsModel.Price">
            <summary>
            Preço
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Dtos.CreateProductsModel.SectionId">
            <summary>
            Id da seção
            </summary>
        </member>
        <member name="T:ArtRegister.Domain.Dtos.UpdateProductsModel">
            <summary>
            Dto para atualizar um produto
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Dtos.UpdateProductsModel.Id">
            <summary>
            Identificador
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Dtos.UpdateProductsModel.Active">
            <summary>
            Está ativo?
            </summary>
        </member>
        <member name="T:ArtRegister.Domain.Dtos.ProductsModel">
            <summary>
            Dto com informações do produto
            </summary>
        </member>
        <member name="T:ArtRegister.Domain.Dtos.CreateSectionsModel">
            <summary>
            Dto para cadastro de seção
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Dtos.CreateSectionsModel.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="T:ArtRegister.Domain.Dtos.UpdateSectionsModel">
            <summary>
            Dto para atualizar uma seção
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Dtos.UpdateSectionsModel.Id">
            <summary>
            Identificador
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Dtos.UpdateSectionsModel.Active">
            <summary>
            Está ativo?
            </summary>
        </member>
        <member name="T:ArtRegister.Domain.Dtos.SectionsModel">
            <summary>
            Dto com informações da seção
            </summary>
        </member>
        <member name="T:ArtRegister.Domain.Models.CommonModels.BaseDoubleEntity">
            <summary>
            Classe genérica para entidades
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.CommonModels.BaseDoubleEntity.Id">
            <summary>
            Identificador
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.CommonModels.BaseDoubleEntity.Id2">
            <summary>
            Identificador 2
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.CommonModels.BaseDoubleEntity.Active">
            <summary>
            Está ativo?
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.CommonModels.BaseDoubleEntity.Deleted">
            <summary>
            Está deletado?
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.CommonModels.BaseDoubleEntity.CreatedDate">
            <summary>
            Data de criação do registro
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.CommonModels.BaseDoubleEntity.LastChange">
            <summary>
            Data da última atualização do registro
            </summary>
        </member>
        <member name="T:ArtRegister.Domain.Models.CommonModels.BaseEntity">
            <summary>
            Classe genérica para entidades
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.CommonModels.BaseEntity.Id">
            <summary>
            Identificador - ou chave primaria composta
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.CommonModels.BaseEntity.Active">
            <summary>
            Está ativo?
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.CommonModels.BaseEntity.Deleted">
            <summary>
            Está deletado?
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.CommonModels.BaseEntity.CreatedDate">
            <summary>
            Data de criação do registro
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.CommonModels.BaseEntity.LastChange">
            <summary>
            Data da última atualização do registro
            </summary>
        </member>
        <member name="T:ArtRegister.Domain.Models.Products">
            <summary>
            Entidade produtos
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.Products.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.Products.Description">
            <summary>
            Descrição
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.Products.Price">
            <summary>
            Preço
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.Products.SectionId">
            <summary>
            Id da seção vinculada
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.Products.Section">
            <summary>
            Seção
            </summary>
        </member>
        <member name="T:ArtRegister.Domain.Models.Sections">
            <summary>
            Entidade seções
            </summary>
        </member>
        <member name="M:ArtRegister.Domain.Models.Sections.#ctor">
            <summary>
            Construção de seção
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.Sections.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:ArtRegister.Domain.Models.Sections.Products">
            <summary>
            Produtos de uma seção
            </summary>
        </member>
        <member name="T:ArtRegister.Infrastructure.Controllers.ProductsController">
            <summary>
            Controlador para CRUD de produtos
            </summary>
        </member>
        <member name="M:ArtRegister.Infrastructure.Controllers.ProductsController.#ctor(ArtRegister.Application.Interfaces.Services.IProductsService)">
            <summary>
            Endpoints para produtos
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:ArtRegister.Infrastructure.Controllers.ProductsController.Insert(ArtRegister.Domain.Dtos.CreateProductsModel)">
            <summary>
            Inserir um novo produto
            </summary>
            <param name="sentProduct"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Controllers.ProductsController.Update(ArtRegister.Domain.Dtos.UpdateProductsModel)">
            <summary>
            Atualizar um produto
            </summary>
            <param name="sentProduct"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Controllers.ProductsController.GetById(System.Int64)">
            <summary>
            Buscar um produto por id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Controllers.ProductsController.GetPaged(ArtRegister.Infrastructure.Dtos.PaginatedInputModel)">
            <summary>
            Busca todos os produtos
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Controllers.ProductsController.Delete(System.Int64)">
            <summary>
            Excluir um produto por id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Infrastructure.Controllers.SectionsController">
            <summary>
            Controlador para CRUD de seções
            </summary>
        </member>
        <member name="M:ArtRegister.Infrastructure.Controllers.SectionsController.#ctor(ArtRegister.Application.Interfaces.Services.ISectionsService)">
            <summary>
            Endpoints para entidade seção
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:ArtRegister.Infrastructure.Controllers.SectionsController.Insert(ArtRegister.Domain.Dtos.CreateSectionsModel)">
            <summary>
            Inserir uma nova seção
            </summary>
            <param name="sentSection"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Controllers.SectionsController.Update(ArtRegister.Domain.Dtos.UpdateSectionsModel)">
            <summary>
            Atualizar uma seção
            </summary>
            <param name="sentSection"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Controllers.SectionsController.GetById(System.Int64)">
            <summary>
            Buscar uma seção por id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Controllers.SectionsController.GetPaged(ArtRegister.Infrastructure.Dtos.PaginatedInputModel)">
            <summary>
            Busca todas as seções
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Controllers.SectionsController.Delete(System.Int64)">
            <summary>
            Excluir uma seção por id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.FilterParams.ColumnName">
            <summary>
            Nome da coluna a ser filtrada
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.FilterParams.FilterValue">
            <summary>
            Valor buscado no filtro
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.FilterParams.FilterOption">
            <summary>
            Tipo do filtro a ser aplicado
            </summary>
        </member>
        <member name="T:ArtRegister.Infrastructure.Dtos.PageResponse">
            <summary>
            Retorno para busca páginada
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.PageResponse.Data">
            <summary>
            Informações
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.PageResponse.Count">
            <summary>
            Quantidade de registros
            </summary>
        </member>
        <member name="T:ArtRegister.Infrastructure.Dtos.PaginatedInputModel">
            <summary>  
            This class contains properites used for paging, sorting, grouping, filtering and will be used as a parameter model  
              
            SortOrder   - enum of sorting orders  
            SortColumn  - Name of the column on which sorting has to be done,  
                          as for now sorting can be performed only on one column at a time.  
            FilterParams - Filtering can be done on multiple columns and for one column multiple values can be selected  
                          key :- will be column name, Value :- will be array list of multiple values  
            PageNumber   - Page Number to be displayed in UI, default to 1  
            PageSize     - Number of items per page, default to 25  
            </summary>  
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.PaginatedInputModel.SortingParams">
            <summary>
            Parâmetros de ordenação
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.PaginatedInputModel.FilterParam">
            <summary>
            Parâmetros de filtragem
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Dtos.PaginatedInputModel.pageNumber">
            <summary>
            Número da página
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.PaginatedInputModel.PageNumber">
            <summary>
            Número da página
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Dtos.PaginatedInputModel.pageSize">
            <summary>
            Tamanho da página
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.PaginatedInputModel.PageSize">
            <summary>
            Tamanho da página
            </summary>
        </member>
        <member name="T:ArtRegister.Infrastructure.Dtos.ResponseMessages`1">
            <summary>
            Classe de retorno para 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.ResponseMessages`1.Status">
            <summary>
            Situação
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.ResponseMessages`1.TimeStamp">
            <summary>
            Data e hora
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.ResponseMessages`1.Messages">
            <summary>
            Mensagens
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.ResponseMessages`1.Data">
            <summary>
            Informações
            </summary>
        </member>
        <member name="M:ArtRegister.Infrastructure.Dtos.ResponseMessages`1.AddMessage(System.String)">
            <summary>
            Adiciona uma mensagem a ser retornado
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.Messages.Message">
            <summary>
            Mensagem
            </summary>
        </member>
        <member name="T:ArtRegister.Infrastructure.Dtos.ReturnData`1">
            <summary>
            Classe de retorno para métodos internos
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.ReturnData`1.Sucess">
            <summary>
            Situação do retorno - verdadeiro/falso
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.ReturnData`1.Data">
            <summary>
            Informação
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.SortingParams.SortOrder">
            <summary>
            Tipo de ordenação
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Dtos.SortingParams.ColumnName">
            <summary>
            Nome da coluna
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.FilterEnum.StartsWith">
            <summary>
            1 - Começa com
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.FilterEnum.EndsWith">
            <summary>
            2 - Termina com
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.FilterEnum.Contains">
            <summary>
            3 - Contém
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.FilterEnum.DoesNotContain">
            <summary>
            4 - Não Contém
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.FilterEnum.IsEmpty">
            <summary>
            5 - Está Vazio
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.FilterEnum.IsNotEmpty">
            <summary>
            6 - Não Está Vazio
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.FilterEnum.IsGreaterThan">
            <summary>
            7 - É Maior
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.FilterEnum.IsGreaterThanOrEqualTo">
            <summary>
            8 - É Maior ou Igual
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.FilterEnum.IsLessThan">
            <summary>
            9 - É Menor
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.FilterEnum.IsLessThanOrEqualTo">
            <summary>
            10 - É Menor ou Igual
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.FilterEnum.IsEqualTo">
            <summary>
            11 - É Igual
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.FilterEnum.IsNotEqualTo">
            <summary>
            12 - Ñão é Igual
            </summary>
        </member>
        <member name="T:ArtRegister.Infrastructure.Enums.SortEnum">
            <summary>
            Enumeradores para ordenação
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.SortEnum.Asc">
            <summary>
            1 - Ascendente
            </summary>
        </member>
        <member name="F:ArtRegister.Infrastructure.Enums.SortEnum.Desc">
            <summary>
            2 - Descendente
            </summary>
        </member>
        <member name="T:ArtRegister.Infrastructure.Queries.Filter`1">
            <summary>
            Classe genérica responsável por filtrar informações
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ArtRegister.Infrastructure.Queries.PaginatedList`1.Data">
            <summary>
            Informações
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Queries.PaginatedList`1.PageIndex">
            <summary>
            Índice da pagina
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Queries.PaginatedList`1.TotalPages">
            <summary>
            Total de páginas
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Queries.PaginatedList`1.TotalItems">
            <summary>
            Total de itens
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Queries.PaginatedList`1.HasPreviousPage">
            <summary>
            Tem página anterior?
            </summary>
        </member>
        <member name="P:ArtRegister.Infrastructure.Queries.PaginatedList`1.HasNextPage">
            <summary>
            Tem próxima página?
            </summary>
        </member>
        <member name="M:ArtRegister.Infrastructure.Queries.PaginatedList`1.CreateAsync(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Cria busca assíncrona
            </summary>
            <param name="source"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Queries.Sorting`1.GroupingData(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Actual grouping will be done in ui,   
            from api we will send sorted data based on grouping columns  
            </summary>  
            <param name="data"></param>  
            <param name="groupingColumns"></param>  
            <returns></returns>  
        </member>
        <member name="M:ArtRegister.Infrastructure.Queries.Sorting`1.SortData(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{ArtRegister.Infrastructure.Dtos.SortingParams})">
            <summary>
             Sorting the data on multiple columns using reflection
            </summary>
            <param name="data"></param>
            <param name="sortingParams"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Infrastructure.Repository.BaseDoubleRepository`1">
            <summary>
            Classe genérica para repositório. CRUD genério.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <summary>
            Classe genérica para repositório. CRUD genério.
            </summary>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseDoubleRepository`1.Insert(`0)">
            <summary>
            Insere um novo registro
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseDoubleRepository`1.Update(`0)">
            <summary>
            Atualiza um registro
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseDoubleRepository`1.PhysicalDelete(System.Int64,System.Int64)">
            <summary>
            Deleta um registro a partir do Id
            </summary>
            <param name="id"></param>
            <param name="id2"></param>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseDoubleRepository`1.UpdateFields(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Atualizar alguns campos
            </summary>
            <param name="entity"></param>
            <param name="includeProperties"></param>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseDoubleRepository`1.Select(System.Int64,System.Int64)">
            <summary>
            Busca um registro por Id
            </summary>
            <param name="id"></param>
            <param name="id2"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseDoubleRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retorna se para a condição, existe tal registro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseDoubleRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constrói busca no banco
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseDoubleRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca quantidade de registros a partir do filtro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseDoubleRepository`1.GetPaged(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca página
            </summary>
            <param name="initialRow"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Infrastructure.Repository.BaseRepository`1">
            <summary>
            Classe genérica para repositório. CRUD genério.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <summary>
            Classe genérica para repositório. CRUD genério.
            </summary>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseRepository`1.Insert(`0)">
            <summary>
            Insere um novo registro
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseRepository`1.Update(`0)">
            <summary>
            Atualiza um registro
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseRepository`1.PhysicalDelete(System.Int64)">
            <summary>
            Deleta um registro a partir do Id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseRepository`1.UpdateFields(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Atualizar alguns campos
            </summary>
            <param name="entity"></param>
            <param name="includeProperties"></param>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseRepository`1.Select">
            <summary>
            Busca todos os registros
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseRepository`1.Select(System.Int64)">
            <summary>
            Busca um registro por Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retorna se para a condição, existe tal registro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constrói busca no banco
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca quantidade de registros a partir do filtro
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:ArtRegister.Infrastructure.Repository.BaseRepository`1.GetPaged(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Busca página
            </summary>
            <param name="initialRow"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:ArtRegister.Infrastructure.Repository.ProductsRepository">
            <summary>
            Repositório para produtos
            </summary>
        </member>
        <member name="T:ArtRegister.Infrastructure.Repository.SectionsRepository">
            <summary>
            Repositório para seções
            </summary>
        </member>
        <member name="T:ArtRegister.Startup">
            <summary>
            Classe de criação do projeto
            </summary>
        </member>
        <member name="M:ArtRegister.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Construtor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:ArtRegister.Startup.Configuration">
            <summary>
            Configuração
            </summary>
        </member>
        <member name="M:ArtRegister.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container. 
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:ArtRegister.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline. 
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
